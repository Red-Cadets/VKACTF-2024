import grpc
import phrases_service_pb2
import phrases_service_pb2_grpc

channel = grpc.insecure_channel("81.94.150.171:10049")
stub = phrases_service_pb2_grpc.GTAGameServiceStub(channel)

phrases = {}


def register_user():
    request = phrases_service_pb2.RegisterRequest(username="old3gg", password="old3gg")
    response = stub.RegisterUser(request)
    print("RegisterUser Response:", response)


def login_user():
    request = phrases_service_pb2.LoginRequest(username="old3gg", password="old3gg")
    response = stub.LoginUser(request)
    print("LoginUser Response:", response)
    return response.authToken


def get_phrase(auth_token):
    request = phrases_service_pb2.GetPhraseRequest(authToken=auth_token)
    response = stub.GetPhrase(request)
    print("GetPhrase Response:", response)
    return response.text


def check_answer(auth_token, phrase, answer):
    request = phrases_service_pb2.CheckAnswerRequest(
        authToken=auth_token, text=phrase, answer=answer
    )
    print(request)
    response = stub.CheckAnswer(request)
    print("CheckAnswer Response:", response)
    return response.correct, response.correctCount, response.correctAnswer


def find_correct_answer(phrase):
    return phrases.get(phrase)


def main():
    register_user()

    auth_token = login_user()

    for _ in range(300):
        phrase = get_phrase(auth_token)
        print("Received Phrase:", phrase)
        correct_answer = find_correct_answer(phrase)

        if correct_answer:
            incorrect_answer = "wrong answer"
            correct, correct_count, correct_answer = check_answer(
                auth_token, phrase, incorrect_answer
            )
            print(
                f"Answered Incorrectly: Correct: {correct}, CorrectCount: {correct_count}"
            )

            if not correct:
                if phrase not in phrases:
                    phrases[phrase] = correct_answer
                    print(f"Added to dictionary: {phrase} -> {correct_answer}")
        else:
            incorrect_answer = "wrong answer"
            correct, correct_count, correct_answer = check_answer(
                auth_token, phrase, incorrect_answer
            )
            print(
                f"Answered Incorrectly: Correct: {correct}, CorrectCount: {correct_count}"
            )

            if not correct and phrase not in phrases:
                phrases[phrase] = correct_answer
                print(f"Added to dictionary: {phrase} -> {correct_answer}")


if __name__ == "__main__":
    main()
    print(phrases)
